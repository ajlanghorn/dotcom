<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Andrew Langhorn</title>
    <link>http://ajlanghorn.com/post/index.xml</link>
    <description>Recent content in Post-rsses on Andrew Langhorn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Andrew Langhorn. All rights reserved.</copyright>
    <lastBuildDate>Mon, 10 Oct 2016 00:41:07 +0100</lastBuildDate>
    <atom:link href="http://ajlanghorn.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Driving from Whistler to Montreal</title>
      <link>http://ajlanghorn.com/post/driving-across-canada/</link>
      <pubDate>Mon, 10 Oct 2016 00:41:07 +0100</pubDate>
      
      <guid>http://ajlanghorn.com/post/driving-across-canada/</guid>
      <description>&lt;p&gt;A few months ago, the possibility of driving from one side of Canada -
namely, &lt;a href=&#34;https://goo.gl/maps/SW6cZxaqufH2&#34;&gt;Whistler&lt;/a&gt; - to the other side -
&lt;a href=&#34;https://goo.gl/maps/QRHPZkkxNfr&#34;&gt;Montreal&lt;/a&gt;, in Quebec - was touted in front
of me. I&amp;rsquo;d only ever previously been to Canada for a few short hops whilst
living in Detroit - either to Windsor, sometimes, or up to Toronto via the
Niagara Falls, so I was keen to give a coast-to-coast (or thereabouts) tour
a good go, and thought it would be great to see so many places at once. So,
I said yes, and booked some flights to Vancouver.&lt;/p&gt;

&lt;p&gt;That was at the end of July, and we&amp;rsquo;d finalised who was heading out to join
us for the two and a half week trip. My fellow drivers
(&lt;a href=&#34;https://twitter.com/cbetta&#34;&gt;Cristiano&lt;/a&gt;,
&lt;a href=&#34;https://twitter.com/kevinprince&#34;&gt;Kevin&lt;/a&gt; and
&lt;a href=&#34;https://twitter.com/bpscott&#34;&gt;Ben&lt;/a&gt;) and I decided to start chalking up some
routes, and to investigate what we&amp;rsquo;d need to actually do the trip in
reasonable comfort whilst also seeing all that Canada had to offer.&lt;/p&gt;

&lt;p&gt;We plotted eight different, potentially feasible, routes across the country,
which we worked out would take us about ten days, via the USA:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://drive.google.com/open?id=1Lhc4ifPS3SmD-5zHZusDQ9hAKE4&amp;amp;usp=sharing&#34;&gt;&lt;img src=&#34;http://ajlanghorn.com/images/driving-across-canada-1.png&#34; alt=&#34;Proposed routes&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We christened our rental car &amp;lsquo;RV Ellipsis&amp;rsquo;, a homage to the good ship
&lt;a href=&#34;https://twitter.com/svellipsis&#34;&gt;@svellipsis&lt;/a&gt;, and set off with creating a
Twitter account, &lt;a href=&#34;https://twitter.com/rv_ellipsis&#34;&gt;@rv_ellipsis&lt;/a&gt; to document our travels.&lt;/p&gt;

&lt;p&gt;I think our Twitter account does a better job of noting what exactly
happened on our travels, so I won&amp;rsquo;t recount it all here. And there are some
things better left for memories than written down anyway&amp;hellip;&lt;/p&gt;

&lt;p&gt;In the end, the route we took looked a little different to one we&amp;rsquo;d planned,
but was approximately the same:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://drive.google.com/open?id=1nRsDh-usUKwLnQIMgUwP0RedaKQ&amp;amp;usp=sharing&#34;&gt;&lt;img src=&#34;http://ajlanghorn.com/images/driving-across-canada-2.png&#34; alt=&#34;Actual route&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s about 5,000 miles, covered in approximately ten days, pretty much
from coast to coast. Suffice to say that the only hiccup we had was a car
scraped across three panels when I was trying to navigate a small Montreal
car park in a big nine-seater Toyota Higlander&amp;hellip;&lt;/p&gt;

&lt;p&gt;Thanks, Canada. You were great fun! Maybe see you again soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On moving to Hugo</title>
      <link>http://ajlanghorn.com/post/moving-to-hugo/</link>
      <pubDate>Sun, 09 Oct 2016 17:39:32 +0100</pubDate>
      
      <guid>http://ajlanghorn.com/post/moving-to-hugo/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not particularly active when it comes to blogging, and I often wonder
whether or not half of the reason for this is because my existing blog takes
an age and a half to deploy once I&amp;rsquo;ve written a post.&lt;/p&gt;

&lt;p&gt;For this reason, many posts end up either in draft form and never published,
or as heavily condensed tweetstorms, curated perfectly (of course!) for my
legion of followers.&lt;/p&gt;

&lt;p&gt;Back in the day, this blog used to run on WordPress, but as times
progressed, I wondered why exactly I did need a relation database holding
all of my posts, and really what use I was getting out of all the additional
cruft it ships with. It&amp;rsquo;s
&lt;a href=&#34;https://www.cvedetails.com/vulnerability-list/vendor_id-2337/product_id-4096/&#34;&gt;vulnerabilities&lt;/a&gt;
weren&amp;rsquo;t too appealing, either.&lt;/p&gt;

&lt;p&gt;So, then I moved to use Jekyll, and deployed it in to S3. This worked for a
while, but then I had to battle Ruby and some other internet beasts to get
the thing to work the way I wanted to. In the end, the process for
deployment was a little bit of hassle. However, I will say that Jekyll, and
Octopress (something else I tried for a while), are both significantly
better for my needs than WordPress was.&lt;/p&gt;

&lt;p&gt;Since my needs are so light, I&amp;rsquo;ve decided to move to
&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;. All I need is to
be able to write some words, run a command and have a static site built that
I can deploy anywhere. And partially, that last bit is why I chose Hugo;
because it&amp;rsquo;s written in Golang, and therefore deployable most everywhere
under the sun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Onwards!</title>
      <link>http://ajlanghorn.com/post/onwards-gds/</link>
      <pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ajlanghorn.com/post/onwards-gds/</guid>
      <description>&lt;p&gt;After two and a half fun years at the &lt;a href=&#34;https://gds.blog.gov.uk&#34;&gt;Government Digital
Service&lt;/a&gt; working as an infrastructure engineer on
the &lt;a href=&#34;https://gov.uk&#34;&gt;GOV.UK&lt;/a&gt; project, I decided recently that I needed to
spend some tiem seeing other stacks and working in other environments.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve learned a heck of a lot whilst working at GDS, and I&amp;rsquo;m very grateful to
everyone who put their time and effort in to spending time with me, teaching
me things and showing me the slightly crazy world that is running a live
service which millions of people around the world rely on.&lt;/p&gt;

&lt;p&gt;Aviation House was a fun place to work, and it&amp;rsquo;s full of some utterly
incredible people doing a lot of hard work to make things look simple on the
outside to the people who matter most; our users. They do this not by
putting their needs first, or the needs of their stakeholders first, but by
realising that there is one true eventual stakeholder: the user.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve joined &lt;a href=&#34;https://thoughtworks.com&#34;&gt;ThoughtWorks&lt;/a&gt;, a software
consultancy, in their Manchester office, and am looking forward to seeing
what I can learn, and working with some of their clients as my career
progresses.&lt;/p&gt;

&lt;p&gt;Thank you, GDS: it was fun. Keep up the good work!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easily managing ACLs in Varnish</title>
      <link>http://ajlanghorn.com/post/varnish-include-acl/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ajlanghorn.com/post/varnish-include-acl/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://varnish-cache.org&#34;&gt;Varnish&lt;/a&gt; is a popular caching HTTP reverse
proxy, used by organisations large and smaller to reduce load on their
canonical origins, to speed up page response times, and to tamper with HTTP
requests and responses which pass through it. It&amp;rsquo;s easily one of my
favourite tools to use when building infrastructure, given how extensible it
is, and for how many use cases it can be an answer.&lt;/p&gt;

&lt;p&gt;I want to focus on a little trick I try regularly to tidy up my VCL (the
Varnish Configuration Language). Let&amp;rsquo;s say we have a specific snippet that I
want to use across multiple VCL files, but I don&amp;rsquo;t want to have to update
the snippet everywhere every time a change is made. A good example might be
an access control list, or &lt;code&gt;ACL&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-acl&#34;&gt;Creating the ACL&lt;/h2&gt;

&lt;p&gt;Firstly, we need to define the ACL. We can do this in a new file - you might
wish to separate your files to include, like this one, in to a separate
directory - with this content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;acl restrict_purge {
  &amp;quot;1.2.3.4&amp;quot;;
  &amp;quot;10.20.30.40&amp;quot;/27;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;restrict_purge&lt;/code&gt; section is simply a descriptive name: call it whatever
you wish, although I find it easier to name snippets as I would functions
when programming, in that their purpose is clear and they aren&amp;rsquo;t too finely
scoped. Make sure, howver, that you keep &lt;code&gt;acl&lt;/code&gt; at the start, since that&amp;rsquo;s
what Varnish is using here to work out that this section is an ACL. You&amp;rsquo;ll
end up in a sticky place if that&amp;rsquo;s not there.&lt;/p&gt;

&lt;h2 id=&#34;using-the-acl&#34;&gt;Using the ACL&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got our ACL defined, we can start to use it. Head in to your
main VCL (where you&amp;rsquo;ve got your Varnish functions defined), and add the
following lines to &lt;code&gt;vcl_recv&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (req.request == &amp;quot;PURGE&amp;quot; &amp;amp;&amp;amp; !(client.ip ~ purge_whitelist)) {
  error 403 &amp;quot;Forbidden&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we&amp;rsquo;re saying that if the HTTP request is sent with the PURGE method,
and the source IP isn&amp;rsquo;t contained in the &lt;code&gt;purge_whitelist&lt;/code&gt; ACL we defined
earlier, Varnish should route the request to &lt;code&gt;vcl_error&lt;/code&gt; and return a 403
without processing the request further at all.&lt;/p&gt;

&lt;h2 id=&#34;using-include&#34;&gt;Using &lt;code&gt;include&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;At this stage, the logic in our main VCL to check the client IP against the
ACL we created earlier doesn&amp;rsquo;t yet do exactly what we&amp;rsquo;re after since we&amp;rsquo;ve
not included the ACL. That&amp;rsquo;s a one-liner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include restrict_purge.vcl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you have it: a reusable snippet of VCL with an ACL inside that you
can use across VCL files. That should keep your VCL a little cleaner when
you have shared dependencies of data.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>